 Learning Outcomes from Day 1 & Day 2
Since you have completed Day 1 (Project Setup) and Day 2 (User Authentication), you have already implemented:  
✔ Express.js Server Setup
✔ MongoDB Connection with Mongoose  
✔ Environment Configuration using `.env`
✔ JWT-based Authentication (Signup & Login) 
✔ Password Hashing using `bcryptjs` 
✔ Authentication Routes & Controllers  

📖 Concepts Learning

1️⃣ Express.js Basics
- Middleware (`app.use()`, `express.json()`, `cors()`, `morgan()`)
- Routing (`app.get()`, `app.post()`, `express.Router`)
- Error Handling (`try-catch`, `express error handling middleware`)

🔹 Learning Resource:
- [Express.js Documentation](https://expressjs.com/)  

2️⃣ MongoDB & Mongoose
- Connecting MongoDB with Mongoose
- Mongoose Schema & Models
- CRUD Operations (Create, Read, Update, Delete)
- Mongoose Middleware (`pre`, `post`)
- Indexes for Performance Optimization
- Populating Related Data (`populate()`)

🔹 Learning Resource: 
- [Mongoose Documentation](https://mongoosejs.com/docs/guide.html)  

3️⃣ Authentication & Security
- JWT (JSON Web Token):  
  🔹 How JWTs work & why they are used for authentication  
  🔹 Difference between **access token** and **refresh token**  
  🔹 How to protect private routes using JWT  

- Password Hashing with bcrypt.js:  
  🔹 Why we hash passwords before storing  
  🔹 How hashing works  

🔹 Learning Resource:
- [JWT.io Documentation](https://jwt.io/)  
- [bcrypt.js Documentation](https://www.npmjs.com/package/bcryptjs)  

4️⃣ Environment Variables & Security
- Why use `.env` files? 
- Preventing hardcoded secrets in code  
- Best practices for securing `.env` files  

🔹 Learning Resource:  
- [dotenv package](https://www.npmjs.com/package/dotenv)  

💬 Interview Questions (Express, MongoDB, Auth) 
These are common backend developer interview questions based on what you've implemented:

🟢 Express.js Questions
1️⃣ What is Express.js and how is it different from Node.js?  
2️⃣ How does middleware work in Express?  
3️⃣ What is `express.json()` and why is it needed?  
4️⃣ What is CORS, and why do we use it?  
5️⃣ How do you handle errors in Express?  

🟢 MongoDB & Mongoose Questions
6️⃣ How does Mongoose differ from MongoDB?  
7️⃣ What is the difference between `find()`, `findOne()`, and `findById()` in Mongoose?  
8️⃣ How does `populate()` work in Mongoose?  
9️⃣ What are MongoDB indexes, and why are they important?  
🔟 What are Mongoose middleware (`pre` & `post` hooks)?  

🟢 Authentication & Security Questions
🔹 What is JWT, and how does it work?  
🔹 Why do we use password hashing, and how does bcrypt.js work?  
🔹 How can you protect APIs that require authentication in Express?  
🔹 What are some common security vulnerabilities in Express apps, and how do you prevent them?  
🔹 What is the difference between `localStorage`, `sessionStorage`, and cookies for storing tokens?  

 What’s Next? (Day 3-4)
For Day 3 & Day 4, you will work on Invoice & Product Management:
✔ Creating Invoice & Product Models 
✔ CRUD operations for Invoices & Products  
✔ Search, Filtering, and Pagination  


Authentication

1. Normal Login and Register- done
2. Google Login - done
3. google register  with set password so that users who login through google can also do normal login.-- done
4. Normal login users also do google login if normal user have google id-- done
5. Both google and normal login and google and normal register for both staff and admin.
                                        -- partially yes staff can do both google and normal login 
                                          but admin only do normal login
6. Both login and register are proper secure.-- partially yes
7. Automatic Logout and log out end point -- done 
8. Forgot Password + Reset via Email
9.  Password Strength Validation
10.  Rate Limiting (Brute-force Protection)
11. Email Verification
12.  CORS, HTTPS, CSRF--done
13. Consider implementing Refresh Tokens for long sessions (optional, not mandatory if 1h expiry is okay)  
14.  Add unit tests for signup, login, and protected routes   
15.Add input validation using `express-validator` or `Joi` for cleaner request payloads           
16. Add rate limiting to auth routes (e.g., `express-rate-limit`) to prevent brute-force                                                    
17. Your Google OAuth `/google/callback` currently returns JSON. For production, redirect it to frontend and pass token in URL/query/cookie 
18. For OAuth or traditional login, you can store tokens in **HTTP-only cookies** for added security (avoid XSS) -done                           |
